// Skeleton generated by Hyland Unity Editor on 2/7/2020 5:22:15 PM
// modified 11-9-2021 CB of Naviant, Inc to add Attribute1 with IL Receipt Line Num keyword value

namespace ECTAPWritePostingdatatoDB
{
 	using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
 	using System.Data.SqlClient;
 	using System.Collections.Generic;
    
    /// <summary>
    /// </summary>
    public class ECTAPWritePostingdatatoDB : Hyland.Unity.IWorkflowScript
    {
        
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {

	#region Variable Declaration
   string HEADER_TABLE_NAME = "[dbo].[AnyDoc_Oracle_AP_Header_Info]";
   string LINE_TABLE_NAME = "[dbo].[AnyDoc_Oracle_AP_Line_Items]";
   
            // header level keyword placeholders
   string vendorSiteCode = string.Empty;
   string termsName = string.Empty;
   string ORSupplierNumber ="";
   string SupplierName ="";
   string InvoiceNumber ="";
   DateTime InvoiceDate = Convert.ToDateTime("01/01/1900");  //Datetime   
   decimal VoucherAmount=0.00M; //decimal
   string PONumber =""; 
   string CurrencyType ="";
   long HeaderID = 0; // OnBase Invoice ID
   string InvoiceTypeLookupCode ="";
   string OrganizationName = "";
   string UseTaxFlag = ""; // USE TAX FLAG
 
 // need to add keywords for these
 decimal TaxAmount=0.00M; //decimal
 decimal MiscAmount =0.00M; //decimal 
    decimal FreightAmount=0.00M; //decimal 
 
   
   int rowcount = 0;
       
  
   
   List<InvoiceLine> invoiceLines = new List<InvoiceLine>();
	#endregion
   
   try
   {
    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Getting keywords");
    foreach(KeywordRecord kr in args.Document.KeywordRecords)
    {
     if((kr.KeywordRecordType.RecordType == RecordType.StandAlone) || (kr.KeywordRecordType.RecordType == RecordType.SingleInstance))
     {
      foreach(Keyword kw in kr.Keywords)
      {
       if(!kw.IsBlank)
       {
		   #region Keywords Switch
		   switch(kw.KeywordType.Name)
		{
		    case "OR Supplier Number":
		        if (kw.AlphaNumericValue == null)
		        {
		            ORSupplierNumber = "NULL";
		        }
		        else
		        {
		            ORSupplierNumber = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Invoice Number":
		        if (kw.AlphaNumericValue == null)
		        {
		            InvoiceNumber = "NULL";
		        }
		        else
		        {
		            InvoiceNumber = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Invoice Date":
		        if (kw.DateTimeValue == null)
		        {
					DateTime defaultDate = new DateTime();
		            InvoiceDate = defaultDate;
		        }
		        else
		        {
		            InvoiceDate = kw.DateTimeValue;
		        }
		        break;
		
		    case "Terms Name":
		        if (kw.AlphaNumericValue == null)
		        {
		            termsName = "NULL";
		        }
		        else
		        {
		            termsName = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Vendor Site Code":
		        if (kw.AlphaNumericValue == null)
		        {
		            vendorSiteCode = "NULL";
		        }
		        else
		        {
		            vendorSiteCode = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Voucher Amount":
		        if (kw.CurrencyValue == null)
		        {
		            VoucherAmount = 0;
		        }
		        else
		        {
		            VoucherAmount = kw.CurrencyValue;
		        }
		        break;
		
		    case "Supplier Name":
		        if (kw.AlphaNumericValue == null)
		        {
		            SupplierName = "NULL";
		        }
		        else
		        {
		            SupplierName = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Organization Name":
		        if (kw.AlphaNumericValue == null)
		        {
		            OrganizationName = "NULL";
		        }
		        else
		        {
		            OrganizationName = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Tax Amount":
		        if (kw.CurrencyValue == null)
		        {
		            TaxAmount = '0';
		        }
		        else
		        {
		            TaxAmount = kw.CurrencyValue;
		        }
		        break;
		
		    case "P.O. #":
		        if (kw.AlphaNumericValue == null)
		        {
		            PONumber = "NULL";
		        }
		        else
		        {
		            PONumber = kw.AlphaNumericValue;
		        }
		        break;
		
		    case "Currency Type":
		        if (kw.AlphaNumericValue == null)
		        {
		            CurrencyType = "NULL";
		        }
		        else
		        {
		            CurrencyType = kw.AlphaNumericValue;
		        }
		        break;
		
			case "BW Invoice Credit Indicator":
				if (kw.AlphaNumericValue == null){InvoiceTypeLookupCode = "NULL";}
				else 
				{
					InvoiceTypeLookupCode = kw.AlphaNumericValue;
         			if(InvoiceTypeLookupCode == "INVOICE") InvoiceTypeLookupCode = "STANDARD";
				}
         		break;
		
		    case "Misc Amount":
		        if (kw.CurrencyValue == null)
		        {
		            MiscAmount = '0';
		        }
		        else
		        {
		            MiscAmount = kw.CurrencyValue;
		        }
		        break;
		
		    case "Freight Amount":
		        if (kw.CurrencyValue == null)
		        {
		            FreightAmount = '0';
		        }
		        else
		        {
		            FreightAmount = kw.CurrencyValue;
		        }
		        break;
		
		    case "OnBase Invoice ID":
		        if (kw.Numeric9Value == null)
		        {
		            HeaderID = '0';
		        }
		        else
		        {
		            HeaderID = kw.Numeric9Value;
		        }
		        break;
		
		    case "Use-Tax Flag":
		        if (kw.AlphaNumericValue == null)
		        {
		            UseTaxFlag = "NULL";
		        }
		        else
		        {
		            UseTaxFlag = kw.AlphaNumericValue;
		        }
		        break;
		} // end switch
		#endregion
       }
      } // foreach kw
  
     } // if record type single or standalone


      if((kr.KeywordRecordType.RecordType == RecordType.MultiInstance) && kr.KeywordRecordType.Name == "ECT - Invoice Line")
      {
       app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "get line KW");
       InvoiceLine currentLine = new InvoiceLine();
       
              
       foreach(Keyword kw in kr.Keywords)
       {
        if(!kw.IsBlank)
        {
			#region Line Keywords Switch
			switch(kw.KeywordType.Name)
			{
			    case "IL Invoice Line Number":
			        currentLine.ILInvoiceLineNumber = kw.Numeric9Value == null ? -1 : kw.Numeric9Value;
			        break;
			    case "IL Description":
			        currentLine.ILDescription = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Quantity":
			        currentLine.ILQuantity = kw.FloatingPointValue == null ? -1: kw.FloatingPointValue;
			        break;
			    case "IL Item Number":  // modified by Sharad IL Item Number kw name to IL Item Number 2
			        currentLine.ILItemNumber = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Unit Price":
			        currentLine.ILUnitPrice = kw.FloatingPointValue == null ? -1 : kw.FloatingPointValue;
			        break;
			    case "IL Amount":
			        currentLine.ILAmount = kw.CurrencyValue == null ? '0' : kw.CurrencyValue;
			        break;
			    case "IL PO Number":
			        currentLine.ILPONumber = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL PO Line Number":
					if (kw.AlphaNumericValue == null) {currentLine.ILPOLineNumber = -1;}
					else {currentLine.ILPOLineNumber = Int32.Parse(kw.AlphaNumericValue);}
			        break;
			    case "IL Tax Code":
			        currentLine.ILTaxCode = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Operating Unit":
			        currentLine.ILOperatingUnit = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Location":
			        currentLine.ILLocation = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Department ":
			        currentLine.ILDepartment = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Natural Account":
			        currentLine.ILNaturalAccount = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Product Group":
			        currentLine.ILProductGroup = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Intercompany":
			        currentLine.ILIntercompany = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Future Use":
			        currentLine.ILFutureUse = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Line Type":
			        currentLine.ILLineType = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL PO Shipment Number":
					if (kw.AlphaNumericValue == null) {currentLine.ILPOShipmentNumber = -1;}
					else {currentLine.ILPOShipmentNumber = Int32.Parse(kw.AlphaNumericValue);}
			        break;
			    case "IL PO Receipt Number":
			        currentLine.ILPOReceiptNumber = kw.AlphaNumericValue == null ? Int32.Parse("-1") : Int32.Parse(kw.AlphaNumericValue);
			        break;
			    case "IL PO Release Number":
					if (kw.AlphaNumericValue == null) {currentLine.ILPOReleaseNumber = -1;}
					else {currentLine.ILPOReleaseNumber = Int32.Parse(kw.AlphaNumericValue);}
			        break;
			    case "IL PO Line Match Option":
			        currentLine.ILPOLineMatchOption = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL KCD":
			        currentLine.ILKCD = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL PO Supplier":
			        currentLine.ILPOSupplier = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL PO Currency":
			        currentLine.ILPOCurrency = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL GL Account Code":
			        currentLine.ILGLAccountCode = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Project Number":
			        currentLine.ILProjectNumber = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Project Task":
			        currentLine.ILProjectTask = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Project Expenditure Type":
			        currentLine.ILProjectExpenditureType = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Project Expenditure Org":
			        currentLine.ILProjectExpenditureOrg = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL PO Receipt Line Num":
			        currentLine.ILPOReceiptLineNum = kw.Numeric9Value == null ? '0' : kw.Numeric9Value;
			        break;
			    case "IL Use-Tax Regime": // USE TAX FLAG
			        currentLine.UseTaxRegime = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			    case "IL Use-Tax Location": // USE TAX FLAG
			        currentLine.UseTaxLocation = kw.AlphaNumericValue == null ? "NULL" : kw.AlphaNumericValue;
			        break;
			}
			#endregion
        }
   
       } // end foreach kw
       
       // remove bad characters in Supplier Name
          SupplierName = SupplierName.Replace("'", ""); 
       
       // clean invalid characters from line description.
       currentLine.ILDescription = currentLine.ILDescription.Replace("'", "");
       currentLine.ILDescription = currentLine.ILDescription.Replace("|", "");
       
       // remove GL Account from line if PO invoice and line is paired
       if((currentLine.ILPONumber.Length > 2) && (currentLine.ILPOLineNumber > 0)) currentLine.ILGLAccountCode = "";
       
       // add line to invoiceLines
       invoiceLines.Add(currentLine);
   
      } // end if ECT - Invoice Line
     } // end foreach keyword record 

	#region Header SQL
   StringBuilder sbHeader = new StringBuilder();
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "build SQL for header");
   
	
	
	
   sbHeader.Append("INSERT INTO ");
   sbHeader.Append(HEADER_TABLE_NAME);
   sbHeader.Append(" ([Vendor_Name]");
   sbHeader.Append(",[OR_Supplier_Number]");
   sbHeader.Append(",[Vendor_Site_Code]");
   sbHeader.Append(",[Attribute2]");
   sbHeader.Append(",[Invoice_Number]");
   sbHeader.Append(",[Invoice_Type_Lookup_Code]");
   sbHeader.Append(",[Invoice_Date]");
   sbHeader.Append(",[PO_Number]");
   sbHeader.Append(",[OU_Name]");
   sbHeader.Append(",[Invoice_Amount]");
   sbHeader.Append(",[Invoice_Currency_Code]");
   sbHeader.Append(",[Source]");
   sbHeader.Append(",[Attribute3]"); // USE TAX FLAG
   sbHeader.Append(",[Process_Flag])");
   //sbHeader.Append(",[TempID]");
   //sbHeader.Append(",[Project Name]");
   //sbHeader.Append(",[Task Number]) ");
	sbHeader.AppendFormat(" VALUES ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}');", SupplierName, ORSupplierNumber, vendorSiteCode, termsName, InvoiceNumber, InvoiceTypeLookupCode, InvoiceDate, PONumber, OrganizationName, VoucherAmount, CurrencyType, "ONBASE", UseTaxFlag, "U");

//   //sbHeader.Append("," + HeaderID);
//   //sbHeader.Append(",''");
//   //sbHeader.Append(",'')");
//   sbHeader.Append(" SELECT TempID from ");
//   sbHeader.Append(HEADER_TABLE_NAME);
//   sbHeader.Append(" WHERE TempID = SCOPE_IDENTITY();");

   
    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "SQL for header: " + sbHeader.ToString());
   
    
 
    
    
    // Get connection to database
    
    // changed to use Oracle BTLApps 12/1/2021 CB Naviant, Inc.
    
    SqlConnection conn = (SqlConnection)app.Configuration.GetConnection("Oracle BTLApps"); 
    
    SqlCommand command = conn.CreateCommand();
    SqlTransaction transaction;
    command.Connection.Open();
       

   app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Begin transaction");
    
    // begin transaction - need to rollback all if any errors
    transaction = conn.BeginTransaction("WritePostingRows");
    
    try
    {
     // write header
     command.CommandText = sbHeader.ToString();
     command.Transaction = transaction;
	int TempID = command.ExecuteNonQuery();
    // int TempID = (int)command.ExecuteScalar();
	command.CommandText = "SELECT TempID from [dbo].[AnyDoc_Oracle_AP_Header_Info] WHERE TempID = SCOPE_IDENTITY();";
	TempID = (int)command.ExecuteScalar();
	
     
     
     
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "returned " + TempID.ToString() + " as TempID");

     #endregion

    #region Lines SQL
     StringBuilder sbLine = new StringBuilder();
      
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Build SQL for lines");
      
     sbLine.Append("INSERT INTO ");
     sbLine.Append(LINE_TABLE_NAME);
     sbLine.Append(" ([OR_Supplier_Number]");
     sbLine.Append(", [Description]");
	 sbLine.Append(", [Attribute6]");
	 sbLine.Append(", [Attribute7]");
     sbLine.Append(", [Line_Type_Lookup_Code]");
     sbLine.Append(", [Amount]");
     sbLine.Append(", [PO_NUMBER]");
     sbLine.Append(", [PO_RELEASE_NUM]");
     sbLine.Append(", [PO_Line]");
     sbLine.Append(", [PO_Shipment]");
     sbLine.Append(", [Code_Combination]");
     sbLine.Append(", [Receipt_No]");
     sbLine.Append(", [KCD_No]");
     sbLine.Append(", [Invoice_Number]");
     sbLine.Append(", [Quantity] ");
     sbLine.Append(", [Accountg_Date] ");
     sbLine.Append(", [PROJECT_NAME] ");
     sbLine.Append(", [TASK_NUMBER] ");
     sbLine.Append(", [EXPENDITURE_TYPE] ");
     sbLine.Append(", [EXPENDITURE_ORGANIZATION] ");
     sbLine.Append(", [HEADER_ID] ");
     sbLine.Append(", [line_Num] ");
     sbLine.Append(", [Attribute1] ");
     sbLine.Append(", [Line_Number] )");
     
     
     rowcount = 0;
	 sbLine.Append(" VALUES ");
     foreach(InvoiceLine currentLine in invoiceLines)
     {
      // fix for in process items - default receipt line number to 1
      // CB 11-19-21 - remove once all in process items before change are complete
      if(currentLine.ILPOReceiptLineNum < 1) currentLine.ILPOReceiptLineNum = 1;
      
      rowcount ++;
      // add values for each line
      if(rowcount > 1) sbLine.Append(", ");
	  if(currentLine.ILPOReceiptNumber <= 0){
		sbLine.Replace(", [Receipt_No]", "");
	  	sbLine.AppendFormat("('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}')", currentLine.ILPOSupplier, currentLine.ILDescription, currentLine.UseTaxRegime, currentLine.UseTaxLocation, "ITEM", currentLine.ILAmount.ToString(), currentLine.ILPONumber, currentLine.ILPOReleaseNumber, currentLine.ILPOLineNumber.ToString(), currentLine.ILPOShipmentNumber, currentLine.ILGLAccountCode, currentLine.ILKCD, InvoiceNumber, currentLine.ILQuantity, DateTime.Now, currentLine.ILProjectNumber, currentLine.ILProjectTask, currentLine.ILProjectExpenditureType, currentLine.ILProjectExpenditureOrg, TempID, Convert.ToInt32(currentLine.ILPOReceiptLineNum), Convert.ToInt32(currentLine.ILPOReceiptLineNum), rowcount);
	  }
	  else{
	  	sbLine.AppendFormat("('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}')", currentLine.ILPOSupplier, currentLine.ILDescription, currentLine.UseTaxRegime, currentLine.UseTaxLocation, "ITEM", currentLine.ILAmount.ToString(), currentLine.ILPONumber, currentLine.ILPOReleaseNumber, currentLine.ILPOLineNumber.ToString(), currentLine.ILPOShipmentNumber, currentLine.ILGLAccountCode, currentLine.ILPOReceiptNumber, currentLine.ILKCD, InvoiceNumber, currentLine.ILQuantity, DateTime.Now, currentLine.ILProjectNumber, currentLine.ILProjectTask, currentLine.ILProjectExpenditureType, currentLine.ILProjectExpenditureOrg, TempID, Convert.ToInt32(currentLine.ILPOReceiptLineNum), Convert.ToInt32(currentLine.ILPOReceiptLineNum), rowcount);
	  }
    
     } // end foreach line
     sbHeader.Append(';');
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Line SQL: " + sbLine.ToString());
    
     command.CommandText = sbLine.ToString();
     command.Transaction = transaction;
     int result = command.ExecuteNonQuery();
     
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, result.ToString() + " of " + rowcount.ToString() + " records were written to database.");
     if (result != rowcount) 
     {
      app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, rowcount.ToString() + " records were expected.");
      throw new Exception("SQL row count mismatch.");      
     }
	 #endregion
     
   
     #region Exception Catching
     
     // Attempt to commit the transaction.
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Commit transaction");
     transaction.Commit();
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info,"All " + result.ToString() + " records are written to database.");
     args.ScriptResult = true;
     args.PropertyBag.Set("propTempID", TempID.ToString());
    }
    catch (Exception ex)
    {
    // args.ScriptResult = false;  Commented By Sharad
    // app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error, ex); Commented By Sharad
     // Added by Sharad Start
     app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error,ex);
     args.PropertyBag.Set("propErrors",  ex.Message.ToString());
     args.ScriptResult = false;
     // Added by Sharad end
     // Attempt to roll back the transaction.
     try
     {
      app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Rollback transaction");
      transaction.Rollback();
     }
     catch (Exception ex2)
     {
      // This catch block will handle any errors that may have occurred
      // on the server that would cause the rollback to fail, such as
      // a closed connection.
      args.ScriptResult = false;
      app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error,ex2);
      args.PropertyBag.Set("propErrors",  ex2.Message.ToString());
     }
          } // end catch on SQL transaction
    
    
    
    
   }  // end main try block
   catch (Exception ex)
   {
    args.ScriptResult = false;
    app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error, ex);
    args.PropertyBag.Set("propErrors",  ex.Message.ToString());
   }
   
   #endregion
   
        }
		
    }

  #region Classes
 public class InvoiceLine
 {
  public long ILInvoiceLineNumber;
  public string ILDescription;
  public double ILQuantity;
  public string ILItemNumber;
  public double ILUnitPrice;
  public decimal ILAmount;
  public string ILPONumber;
  public int ILPOLineNumber;
  public string ILTaxCode;
  public string ILOperatingUnit;
  public string ILLocation;
  public string ILDepartment;
  public string ILNaturalAccount;
  public string ILProductGroup;
  public string ILIntercompany;
  public string ILFutureUse;
  public string ILLineType;
  public int ILPOShipmentNumber; //
  public int ILPOReceiptNumber;
  public int ILPOReleaseNumber; //
  public string ILPOLineMatchOption;
  public string ILKCD;
  public string ILPOSupplier;
  public string ILPOCurrency;
  public string ILGLAccountCode;
  public string ILProjectNumber;
  public string ILProjectTask;
  public string ILProjectExpenditureType;
  public string ILProjectExpenditureOrg;
  public long ILPOReceiptLineNum;  // Added by Sharad
  public string UseTaxRegime; // USE TAX
  public string UseTaxLocation; // USE TAX
  
  
  public InvoiceLine ()
  {
   ILInvoiceLineNumber = 0;
   ILDescription = "";
   ILQuantity = 0;
   ILItemNumber = "";
   ILUnitPrice = 0;
   ILAmount = 0;
   ILPONumber = "";
   ILPOLineNumber = 0;
   ILTaxCode = "";
   ILOperatingUnit = "";
   ILLocation = "";
   ILDepartment = "";
   ILNaturalAccount = "";
   ILProductGroup = "";
   ILIntercompany = "";
   ILFutureUse = "";
   ILLineType = "";
   ILPOShipmentNumber = 0;
   ILPOReceiptNumber = 0;
   ILPOReleaseNumber = 0;
   ILPOLineMatchOption = "";
   ILKCD = "";
   ILPOSupplier = "";
   ILPOCurrency = "";
   ILGLAccountCode = "";
   ILProjectNumber = "";
   ILProjectTask = "";
   ILProjectExpenditureType = "";
   ILProjectExpenditureOrg = "";
   ILPOReceiptLineNum = 0;  // Added by Sharad
   UseTaxRegime = ""; // USE TAX
   UseTaxLocation = ""; // USE TAX
  }
  #endregion
  #endregion
 }
 
}
