// Skeleton generated by Hyland Unity Editor on 4/26/2021 4:35:24 PM
namespace APPostPOInvoice
{
    using System;
    using System.Text;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	using System.Xml;   
	using System.Net;
	using System.IO;
    
    
    /// <summary>
    /// AP Post PO Invoice
    /// </summary>
    public class APPostPOInvoice : Hyland.Unity.IWorkflowScript
    {
        
        #region IWorkflowScript
        /// <summary>
        /// Implementation of <see cref="IWorkflowScript.OnWorkflowScriptExecute" />.
        /// <seealso cref="IWorkflowScript" />
        /// </summary>
        /// <param name="app"></param>
        /// <param name="args"></param>
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {
			string requestData;
			string soapAction;
			string url;
			string responseXML;
			string username;
			string password;
			string SAPDocNumber = "";
			string outputMessage = "";
			bool duplicate = false;
					
			
			//try
			//{
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Post PO Invoice begin");
	            
				// get config
				app.Configuration.TryGetValue("MIROSoapAction", out soapAction);
				app.Configuration.TryGetValue("MIROUrl",out url);
				app.Configuration.TryGetValue("WSusername",out username);
				app.Configuration.TryGetValue("WSpassword",out password);
				
				// get data
				args.PropertyBag.TryGetValue("MIROData",out requestData);
				
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "call service {0} action {1} data {2}", url,soapAction, requestData);
				
				// call service
				responseXML = InvokeService(url, soapAction, requestData, username, password,  app);
				
				// handle response
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Response {0}",responseXML);

				
				XmlDocument responseDoc =  new XmlDocument();
				responseDoc.LoadXml(responseXML);
				XmlElement root = responseDoc.DocumentElement;
			
				// get document number
				XmlNode docNumberNode = root.SelectSingleNode("//INVOICEDOCNUMBER");
			    if(docNumberNode != null) SAPDocNumber = docNumberNode.InnerText;
				
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info,"SAP Doc Number {0}",SAPDocNumber);
				
				//get return messages
				XmlNodeList returnList = responseDoc.SelectNodes("//RETURN/item");
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info,"count: {0}", returnList.Count);
				
				// store messages in MIKG
				KeywordModifier kwm = args.Document.CreateKeywordModifier();
					
				for(int i=0;i<= returnList.Count -1; i++)
				{
					EditableKeywordRecord ekrIL = app.Core.KeywordRecordTypes.Find("SAP Messages").CreateEditableKeywordRecord();
					if(i>0) outputMessage += ", ";
					foreach(XmlNode node in returnList[i].ChildNodes)
					{
						app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info,"node name {0}, value {1}",node.Name, node.InnerText);
						if(node != null)
						{
							if(node.Name == "TYPE")
							{  
								ekrIL.AddKeyword("SAP Message Type", node.InnerText);	
							}
							if(node.Name == "MESSAGE")
							{
								ekrIL.AddKeyword("SAP Message", node.InnerText);
								if(node.InnerText.ToUpper().Contains("ALREADY ENTERED"))
								{
									duplicate = true;
								}
							}
						} // node != null
					} //  end foreach node
					
					kwm.AddKeywordRecord(ekrIL);			

				} // next item
				
				if(!duplicate)
				{
					if(SAPDocNumber != "") kwm.AddKeyword("SAP Document Number",SAPDocNumber);
				}
				kwm.ApplyChanges();

				/*args.PropertyBag.Set("SAPDocNumber", SAPDocNumber);
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "SAPDocNumber: {0}" ,SAPDocNumber);
				args.PropertyBag.Set("outputMessage", outputMessage);
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "outputMessage: {0}" ,outputMessage);
				*/
				
				//INVOICEDOCNUMBER - 10 digit string
				//RETURN
					//TYPE
					//ID
					//NUMBER
					//MESSAGE
					//LOG_NO
					//LOG_MSG_NO
					//MESSAGE_V1
					//MESSAGE_V2
					//MESSAGE_V3
					//MESSAGE_V4
					//PARAMETER
					//ROW : int
					//FIELD
					//SYSTEM
				
				args.ScriptResult = true;
				
		/*
			}
			catch (Exception ex)
			{
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Error, "Error in post PO Invoice: " + ex.Message);
				args.ScriptResult = false;
			}
		*/
				
			
			
        }
		
		public string InvokeService(string url, string soapAction, string requestData, string username, string password,Hyland.Unity.Application app)  
        {  
            //Calling CreateSOAPWebRequest method  
            HttpWebRequest request = CreateSOAPWebRequest(url, soapAction);  
			request.Credentials = new NetworkCredential(username,password);
			request.PreAuthenticate = true;
  
            XmlDocument SOAPReqBody = new XmlDocument();  
            //SOAP Body Request  
            SOAPReqBody.LoadXml(@"<?xml version=""1.0"" encoding=""utf-8""?> <soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:sap-com:document:sap:rfc:functions""> <soapenv:Body>" + requestData + " </soapenv:Body> </soapenv:Envelope>");  
			app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Requestbody {0}",SOAPReqBody.InnerXml);
  
  
            using (Stream stream = request.GetRequestStream())  
            {  
                SOAPReqBody.Save(stream);  
            }  
            //Geting response from request  
			
			string responseString = "";

			try
			{
				using (WebResponse Serviceres = request.GetResponse())  
            	{  
            		using (StreamReader rd = new StreamReader(Serviceres.GetResponseStream()))  
                	{  
                    	//reading stream  
                	    var ServiceResult = rd.ReadToEnd();  
                    	responseString = ServiceResult.ToString(); 
                	}  
            	}  
			}
			catch (WebException ex)
			{
				app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "1");
				using (StreamReader errorReader = new StreamReader(ex.Response.GetResponseStream()))
				{
					app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "2");
					var result = errorReader.ReadToEnd(); 
					responseString = result.ToString();
					app.Diagnostics.WriteIf(Diagnostics.DiagnosticsLevel.Info, "Res: {0}", responseString);

					if(responseString.Contains("NOT_DISTRIBUTABLE"))
					{
						responseString = @"<?xml version=""1.0"" encoding=""utf-8""?> <soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:sap-com:document:sap:rfc:functions""> <soapenv:Body> <ns0:ZBAPI_INCOMINGINVOICE_CREATE.Response xmlns:ns0=""urn:sap-com:document:sap:rfc:functions""><ITEMDATA/><RETURN><item><TYPE>E</TYPE><ID>M8</ID><NUMBER>377</NUMBER><MESSAGE>NOT_DISTRIBUTABLE</MESSAGE></item></RETURN></ns0:ZBAPI_INCOMINGINVOICE_CREATE.Response></soapenv:Body></soapenv:Envelope>";
					}
					else
					{
						throw;
					}
				}

			}
			return responseString;  
        }  
  
        public HttpWebRequest CreateSOAPWebRequest(string url, string soapAction)  
        {  
            //Making Web Request  
            HttpWebRequest Req = (HttpWebRequest)WebRequest.Create(url);  
            //SOAPAction  
            Req.Headers.Add(@"SOAPAction:" + soapAction);  
            //Content_type  
            Req.ContentType = "text/xml;charset=\"utf-8\"";  
            Req.Accept = "text/xml";  
            //HTTP method  
            Req.Method = "POST";  
            //return HttpWebRequest  
            return Req;  
        }
        #endregion
    }
}
